{"ast":null,"code":"//import { EventEmitter } from '@angular/core';\nimport { Ingredient } from '../shared/ingredient.model';\nimport { Subject } from 'rxjs';\nexport class ShoppingListService {\n  constructor() {\n    //senza observable\n    //ingredientsChanged = new EventEmitter<Ingredient[]>();\n    //con observables\n    this.ingredientsChanged = new Subject(); //con form\n\n    this.startedEditing = new Subject();\n    this.ingredients = [new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10)]; //ingredients = array di oggetti Ingredient - definiti in  shared/ingredient.model\n  } //per vedere gli ingredienti\n\n\n  getIngredients() {\n    return this.ingredients.slice();\n  } //per ottenere l'indice dell'ingrediente\n\n\n  getIngredient(index) {\n    return this.ingredients[index];\n  } //per aggiungere ingredienti\n\n\n  addIngredient(ingredient) {\n    this.ingredients.push(ingredient); //aggiungo all'array ingredients\n    //senza observables: this.ingredientsChanged.emit(this.ingredients.slice());\n\n    this.ingredientsChanged.next(this.ingredients.slice());\n  } //per modificare gli ingredienti\n\n\n  updateIngredient(index, newIngredient) {\n    this.ingredients[index] = newIngredient;\n    this.ingredientsChanged.next(this.ingredients.slice());\n  }\n\n  addIngredients(ingredients) {\n    //1° metodo (più lento)\n    //for (let ing of ingredients) {\n    //  this.addIngredient(ing);\n    //}\n    this.ingredients.push(...ingredients); //push dei singoli elementi\n    //senza observables: this.ingredientsChanged.emit(this.ingredients.slice());\n\n    this.ingredientsChanged.next(this.ingredients.slice());\n  }\n\n  deleteIngredient(index) {\n    this.ingredients.splice(index, 1); //a partire da index, elimino un elemento\n\n    this.ingredientsChanged.next(this.ingredients.slice());\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}