{"ast":null,"code":"import * as fromAuthActions from './store/auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\"; // export interface AuthResponseData {\n//   kind: string;\n//   idToken: string;\n//   email: string;\n//   refreshToken: string;\n//   expiresIn: string; //secondi dopo i quali scade il token\n//   localId: string;\n//   registered?: boolean; //? per facoltativo non per signup ma per login\n// }\n\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor( //private http: HttpClient,\n    //private router: Router,\n    store) {\n      this.store = store;\n    } //metodo per iscrizione\n    //vedi https://firebase.google.com/docs/reference/rest/auth#section-create-email-password\n    //api key da firebase -> impostazioni progetto\n    // senza ngRx:\n    // signUp(email: string, password: string) {\n    //   return this.http\n    //     .post<AuthResponseData>(\n    //       'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' +\n    //         environment.firebaseAPIKey,\n    //       { email: email, password: password, returnSecureToken: true }\n    //     )\n    //     .pipe(\n    //       catchError(this.handleError),\n    //       //tap per eseguire codice senza modificare la response\n    //       tap((resData) => {\n    //         this.handleAuth(\n    //           resData.email,\n    //           resData.localId,\n    //           resData.idToken,\n    //           +resData.expiresIn //+ davanti: as number\n    //         );\n    //       })\n    //     );\n    // }\n    //metodo per login\n    //vedi https://firebase.google.com/docs/reference/rest/auth#section-sign-in-email-password\n    // senza ngRx:\n    // login(email: string, password: string) {\n    //   return this.http\n    //     .post<AuthResponseData>(\n    //       'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' +\n    //         environment.firebaseAPIKey,\n    //       { email: email, password: password, returnSecureToken: true }\n    //     )\n    //     .pipe(\n    //       catchError(this.handleError),\n    //       //tap per eseguire codice senza modificare la response\n    //       tap((resData) => {\n    //         this.handleAuth(\n    //           resData.email,\n    //           resData.localId,\n    //           resData.idToken,\n    //           +resData.expiresIn //+ davanti: as number\n    //         );\n    //       })\n    //     );\n    // }\n    // senza ngRx:\n    // logout() {\n    //   //this.userSubj.next(null);\n    //   this.store.dispatch(new fromAuthActions.Logout());\n    //   //this.router.navigate(['/auth']);\n    //   localStorage.removeItem('userData');\n    //   if (this.tokenExpTimer) {\n    //     clearTimeout(this.tokenExpTimer);\n    //   }\n    //   this.tokenExpTimer = null;\n    // }\n    // senza ngRx:\n    // autoLogin() {\n    //   //se utente memorizzato in local storage\n    //   const userData: {\n    //     email: string;\n    //     id: string;\n    //     _token: string;\n    //     _tokenExpirationDate: string;\n    //   } = JSON.parse(localStorage.getItem('userData')); //riconverto in oggetto js\n    //   if (!userData) {\n    //     return;\n    //   }\n    //   const loadedUser = new User(\n    //     userData.email,\n    //     userData.id,\n    //     userData._token,\n    //     new Date(userData._tokenExpirationDate)\n    //   );\n    //   if (loadedUser.token) {\n    //     const expDuration =\n    //       new Date(userData._tokenExpirationDate).getTime() -\n    //       new Date().getTime();\n    //     //this.userSubj.next(loadedUser);\n    //     this.store.dispatch(\n    //       new fromAuthActions.AuthSuccess({\n    //         email: loadedUser.email,\n    //         userId: loadedUser.id,\n    //         token: loadedUser.token,\n    //         expirationDate: new Date(userData._tokenExpirationDate),\n    //       })\n    //     );\n    //     this.autoLogOut(expDuration);\n    //   }\n    // }\n    //metodo per settare un timer di logout\n\n\n    autoLogOut(expDuration) {\n      console.log(expDuration);\n      this.tokenExpTimer = setTimeout(() => {\n        this.store.dispatch(new fromAuthActions.Logout());\n      }, expDuration);\n    }\n\n    clearLogoutTimer() {\n      if (this.tokenExpTimer) {\n        clearTimeout(this.tokenExpTimer);\n        this.tokenExpTimer = null;\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Store));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}