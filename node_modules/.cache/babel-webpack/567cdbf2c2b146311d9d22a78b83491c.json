{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport * as fromRecipesActions from '../store/recipes.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@ngrx/store\";\nexport class RecipeEffects {\n  constructor(actions$, http, store) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.store = store;\n    this.fetchRecipeEff = this.actions$.pipe(ofType(fromRecipesActions.FETCH_RECIPES), switchMap(fetchAction => {\n      return this.http.get('https://first-app-b8863-default-rtdb.firebaseio.com/recipes.json');\n    }), map(recipes => {\n      //map operatore rxjs\n      return recipes.map(recipe => {\n        //map metodo array js\n        return Object.assign(Object.assign({}, recipe), {\n          ingredients: recipe.ingredients ? recipe.ingredients : []\n        });\n      });\n    }), map(recipes => {\n      return new fromRecipesActions.SetRecipes(recipes);\n    }));\n    this.storeRecipesEff = this.actions$.pipe(ofType(fromRecipesActions.STORE_RECIPES), withLatestFrom(this.store.select('recipes')), switchMap(([actionData, recipesState]) => {\n      return this.http.put('https://first-app-b8863-default-rtdb.firebaseio.com/recipes.json', recipesState.recipes);\n    }));\n  }\n\n}\n\nRecipeEffects.ɵfac = function RecipeEffects_Factory(t) {\n  return new (t || RecipeEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Store));\n};\n\nRecipeEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RecipeEffects,\n  factory: RecipeEffects.ɵfac\n});\n\n__decorate([Effect()], RecipeEffects.prototype, \"fetchRecipeEff\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n})], RecipeEffects.prototype, \"storeRecipesEff\", void 0);","map":null,"metadata":{},"sourceType":"module"}