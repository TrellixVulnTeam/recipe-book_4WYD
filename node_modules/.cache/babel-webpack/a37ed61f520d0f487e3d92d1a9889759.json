{"ast":null,"code":"import * as fromRecipesActions from './store/recipes.actions';\nimport { ofType } from '@ngrx/effects';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nexport let RecipesResolverService = /*#__PURE__*/(() => {\n  class RecipesResolverService {\n    constructor( // private dataStorageService: DataStorageService,\n    // private recipeService: RecipeService,\n    store, actions$) {\n      this.store = store;\n      this.actions$ = actions$;\n    } //ottiene un'istantanea dei dati della rotta e lo stato della route\n\n\n    resolve(route, state) {\n      //carico tutte le ricette\n      //const recipes = this.recipeService.getRecipes();\n      //if (recipes.length === 0) {\n      //return this.dataStorageService.fetchRecipes(); //ottengo i dati già salvati\n      return this.store.select('recipes').pipe(take(1), map(recipesState => {\n        return recipesState.recipes;\n      }), switchMap(recipes => {\n        if (recipes.length === 0) {\n          this.store.dispatch(new fromRecipesActions.FetchRecipes());\n          return this.actions$.pipe(ofType(fromRecipesActions.SET_RECIPES), take(1));\n        } else {\n          return of(recipes);\n        }\n      })); // } else {\n      //   return recipes; //ottengo recipes con le modifiche\n      // }\n    }\n\n  }\n\n  RecipesResolverService.ɵfac = function RecipesResolverService_Factory(t) {\n    return new (t || RecipesResolverService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions));\n  };\n\n  RecipesResolverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecipesResolverService,\n    factory: RecipesResolverService.ɵfac,\n    providedIn: 'root'\n  });\n  return RecipesResolverService;\n})();","map":null,"metadata":{},"sourceType":"module"}