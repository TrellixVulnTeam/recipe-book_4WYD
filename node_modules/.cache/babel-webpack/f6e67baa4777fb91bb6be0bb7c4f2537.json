{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shopping-list/shopping-list.service\"; //service per gestire le ricette in un unico posto\n//con il service istanzio la classe Recipe qui e non più nel Component\n\nexport let RecipeService = /*#__PURE__*/(() => {\n  class RecipeService {\n    /*con setRecipes non ho più bisogno degli oggetti mock\r\n    private recipes: Recipe[] = [\r\n      //recipes è un array di oggetti Recipe\r\n      new Recipe(\r\n        'Pizza',\r\n        'Descrizione pizza',\r\n        'https://www.my-personaltrainer.it/2020/10/13/pizza-orig.jpeg',\r\n        [\r\n          new Ingredient('Flour', 1),\r\n          new Ingredient('Tomatoes', 2),\r\n          new Ingredient('Cheese', 2),\r\n        ]\r\n      ),\r\n      new Recipe(\r\n        'Pancake',\r\n        'Descrizione pancake',\r\n        'https://mclaudia.altervista.org/wp-content/uploads/2020/04/SH_pancake_americani-1024x683-1.jpg',\r\n        [\r\n          new Ingredient('Flour', 1),\r\n          new Ingredient('Eggs', 2),\r\n          new Ingredient('Milk', 1),\r\n        ]\r\n      ),\r\n      new Recipe(\r\n        'Guacamole',\r\n        'Descrizione guacamole',\r\n        'https://blog.giallozafferano.it/allacciateilgrembiule/wp-content/uploads/2018/07/salsa-guacamole.jpg',\r\n        [new Ingredient('Avocados', 2), new Ingredient('Tomatoes', 2)]\r\n      ),\r\n    ];*/\n    constructor(slService) {\n      this.slService = slService; //senza observables: recipeSelected = new EventEmitter<Recipe>();\n      //recipeSelected = new Subject<Recipe>();\n      //creo una nuova var recipeChanged a cui riassegnare sennò non prende i valori aggiornati (ad es. getRecipes prende solo una copia)\n\n      this.recipesChanged = new Subject();\n      this.recipes = [];\n    } //metodo per restituire recipes\n\n\n    getRecipes() {\n      return this.recipes.slice(); //slice per una copia esatta dell'array\n    }\n\n    getRecipe(index) {\n      return this.recipes.slice()[index];\n    } //metodo per sovrascrivere le recipes già esistenti in recipeService\n\n\n    setRecipes(recipes) {\n      this.recipes = recipes;\n      this.recipesChanged.next(this.recipes.slice());\n    }\n\n    addIngrToShoppingList(ingredients) {\n      this.slService.addIngredients(ingredients);\n    }\n\n    addRecipe(recipe) {\n      //per aggiungere una ricetta\n      this.recipes.push(recipe); //assegno a recipesChanged\n\n      this.recipesChanged.next(this.recipes.slice());\n    }\n\n    updateRecipe(index, newRecipe) {\n      //per aggiornare una ricetta\n      this.recipes[index] = newRecipe;\n      this.recipesChanged.next(this.recipes.slice());\n    }\n\n    deleteRecipe(index) {\n      this.recipes.splice(index, 1); //da index elimino un elemento\n\n      this.recipesChanged.next(this.recipes.slice()); //creo una copia di recipes aggiornato\n    }\n\n  }\n\n  RecipeService.ɵfac = function RecipeService_Factory(t) {\n    return new (t || RecipeService)(i0.ɵɵinject(i1.ShoppingListService));\n  };\n\n  RecipeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecipeService,\n    factory: RecipeService.ɵfac\n  });\n  return RecipeService;\n})();","map":null,"metadata":{},"sourceType":"module"}