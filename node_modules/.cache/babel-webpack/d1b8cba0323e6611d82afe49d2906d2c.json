{"ast":null,"code":"import { AlertComponent } from '../shared/alert/alert.component';\nimport { PlaceHolderDirective } from '../shared/placeholder/placeholder.directive';\nimport * as fromAuthActions from '../auth/store/auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"../shared/placeholder/placeholder.directive\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../shared/loading-spinner/loading-spinner.component\";\nimport * as i5 from \"@angular/forms\";\n\nfunction AuthComponent_ng_template_0_Template(rf, ctx) {}\n\nfunction AuthComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelement(1, \"app-loading-spinner\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AuthComponent_form_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 6, 7);\n    i0.ɵɵlistener(\"ngSubmit\", function AuthComponent_form_4_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n\n      const _r3 = i0.ɵɵreference(1);\n\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onSubmit(_r3);\n    });\n    i0.ɵɵelementStart(2, \"div\", 8);\n    i0.ɵɵelementStart(3, \"label\", 9);\n    i0.ɵɵtext(4, \"Email\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 8);\n    i0.ɵɵelementStart(7, \"label\", 11);\n    i0.ɵɵtext(8, \"Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"input\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\");\n    i0.ɵɵelementStart(11, \"button\", 13);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13, \" | \");\n    i0.ɵɵelementStart(14, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function AuthComponent_form_4_Template_button_click_14_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.switchMode();\n    });\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r3 = i0.ɵɵreference(1);\n\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"disabled\", !_r3.valid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.isLoginMode ? \"Log In\" : \"Sign Up\", \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Switch To \", ctx_r2.isLoginMode ? \"Sign Up\" : \"Log In\", \" \");\n  }\n}\n\nexport let AuthComponent = /*#__PURE__*/(() => {\n  class AuthComponent {\n    constructor( //private authService: AuthService,\n    //private router: Router,\n    componentFactoryResolver, store) {\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.store = store; //per switch tra login e signin\n\n      this.isLoginMode = true; //inizializzo su login\n      //per spinner\n\n      this.isLoading = false; //per eventuali messaggi di errore\n\n      this.error = null;\n    }\n\n    ngOnInit() {\n      this.storeSubscr = this.store.select('auth').subscribe(authState => {\n        this.isLoading = authState.loading;\n        this.error = authState.authError;\n\n        if (this.error) {\n          this.showErrorAlert(this.error);\n        }\n      });\n    } //metodo per switch\n\n\n    switchMode() {\n      this.isLoginMode = !this.isLoginMode;\n    }\n\n    onSubmit(form) {\n      if (!form.valid) {\n        return;\n      } //console.log(form.value);\n\n\n      const email = form.value.email;\n      const password = form.value.password; //let authObs: Observable<AuthResponseData>;\n      //this.isLoading = true;\n\n      if (this.isLoginMode) {\n        //se è in modalità login\n        //authObs = this.authService.login(email, password);\n        this.store.dispatch(new fromAuthActions.LoginStart({\n          email: email,\n          password: password\n        }));\n      } else {\n        //se è in modalità sign up\n        this.store.dispatch(new fromAuthActions.LoginStart({\n          email: email,\n          password: password\n        }));\n      } // senza ngRx:\n      // authObs.subscribe(\n      //   (resData) => {\n      //     //se ok\n      //     console.log(resData);\n      //     this.isLoading = false;\n      //     this.router.navigate(['/recipes']);\n      //   },\n      //   (errorMessage) => {\n      //     //se errore\n      //     console.log(errorMessage);\n      //     this.error = errorMessage;\n      //     this.isLoading = false;\n      //     this.showErrorAlert(errorMessage);\n      //   }\n      // );\n\n\n      form.reset();\n    }\n\n    onCloseError() {\n      //  this.error = null; //chiude la finestra perchè l'app-alert è visibile solo se c'è un errore\n      this.store.dispatch(new fromAuthActions.ClearError());\n    } //altro metodo per componenti dinamici\n\n\n    showErrorAlert(message) {\n      //crea un'istanza del componente alert\n      const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory(AlertComponent); //riferimento locale nel DOM\n\n      const hostViewContainerRef = this.alertHost.viewContainerRef; //cancello tutti ciò che è stato creato in quel local ref\n\n      hostViewContainerRef.clear();\n      const componentRef = hostViewContainerRef.createComponent(alertCmpFactory);\n      componentRef.instance.message = message;\n      this.closeSubscr = componentRef.instance.close.subscribe(() => {\n        this.closeSubscr.unsubscribe();\n        hostViewContainerRef.clear();\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.closeSubscr) {\n        this.closeSubscr.unsubscribe();\n      }\n\n      if (this.storeSubscr) {\n        this.storeSubscr.unsubscribe();\n      }\n    }\n\n  }\n\n  AuthComponent.ɵfac = function AuthComponent_Factory(t) {\n    return new (t || AuthComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i1.Store));\n  };\n\n  AuthComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthComponent,\n    selectors: [[\"app-auth\"]],\n    viewQuery: function AuthComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(PlaceHolderDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.alertHost = _t.first);\n      }\n    },\n    decls: 5,\n    vars: 2,\n    consts: [[\"appPlaceholder\", \"\"], [1, \"row\"], [1, \"col-12\", \"col-md-6\", \"col-md-offset-3\"], [\"style\", \"text-align: center\", 4, \"ngIf\"], [3, \"ngSubmit\", 4, \"ngIf\"], [2, \"text-align\", \"center\"], [3, \"ngSubmit\"], [\"authForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"ngModel\", \"\", \"required\", \"\", \"email\", \"\", 1, \"form-control\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"ngModel\", \"\", \"required\", \"\", \"minlength\", \"6\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn-btn-primary\", 3, \"click\"]],\n    template: function AuthComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AuthComponent_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtemplate(3, AuthComponent_div_3_Template, 2, 0, \"div\", 3);\n        i0.ɵɵtemplate(4, AuthComponent_form_4_Template, 16, 3, \"form\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n      }\n    },\n    directives: [i2.PlaceHolderDirective, i3.NgIf, i4.LoadingSpinnerComponent, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.NgForm, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel, i5.RequiredValidator, i5.EmailValidator, i5.MinLengthValidator],\n    styles: [\"\"]\n  });\n  return AuthComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}