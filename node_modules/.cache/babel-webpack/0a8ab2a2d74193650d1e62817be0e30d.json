{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.userSubj = new BehaviorSubject(null); //rispetto a subject fornisce anche l'accesso al valore precedentemente emesso\n    } //metodo per iscrizione\n    //vedi https://firebase.google.com/docs/reference/rest/auth#section-create-email-password\n    //api key da firebase -> impostazioni progetto\n\n\n    signUp(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBjchcpbMw7QHeye_BHUSl0IiMadrAKKXI', {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), //tap per eseguire codice senza modificare la response\n      tap(resData => {\n        this.handleAuth(resData.email, resData.localId, resData.idToken, +resData.expiresIn //+ davanti: as number\n        );\n      }));\n    } //metodo per login\n    //vedi https://firebase.google.com/docs/reference/rest/auth#section-sign-in-email-password\n\n\n    login(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBjchcpbMw7QHeye_BHUSl0IiMadrAKKXI', {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), //tap per eseguire codice senza modificare la response\n      tap(resData => {\n        this.handleAuth(resData.email, resData.localId, resData.idToken, +resData.expiresIn //+ davanti: as number\n        );\n      }));\n    }\n\n    logout() {\n      this.userSubj.next(null);\n      this.router.navigate(['/auth']);\n      localStorage.removeItem('userData');\n\n      if (this.tokenExpTimer) {\n        clearTimeout(this.tokenExpTimer);\n      }\n\n      this.tokenExpTimer = null;\n    }\n\n    autoLogin() {\n      //se utente memorizzato in local storage\n      const userData = JSON.parse(localStorage.getItem('userData')); //riconverto in oggetto js\n\n      if (!userData) {\n        return;\n      }\n\n      const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n      if (loadedUser.token) {\n        const expDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.userSubj.next(loadedUser);\n        this.autoLogOut(expDuration);\n      }\n    }\n\n    autoLogOut(expDuration) {\n      console.log(expDuration);\n      this.tokenExpTimer = setTimeout(() => {\n        this.logout();\n      }, expDuration);\n    }\n\n    handleAuth(email, userId, token, expiresIn) {\n      const expirationDate = new Date(new Date().getTime() + expiresIn * 1000 //*1000 perchè getTime è in millisecondi\n      );\n      const user = new User(email, userId, token, expirationDate);\n      this.userSubj.next(user);\n      this.autoLogOut(expiresIn * 1000);\n      localStorage.setItem('userData', JSON.stringify(user)); //passo i dati della const user (in stringa)\n    } //vedo i dati user su ispeziona -> applicazione -> memoria locale\n\n\n    handleError(errorRes) {\n      let errorMessage = 'An unknown error occurred!';\n\n      if (!errorRes.error || !errorRes.error.error) {\n        return throwError(errorMessage);\n      } //se non ha una chiave di errore\n\n\n      switch (errorRes.error.error.message) {\n        case 'EMAIL_EXISTS':\n          errorMessage = 'This email already exists!';\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = 'Email not found!';\n          break;\n\n        case 'INVALID_PASSWORD':\n          errorMessage = 'Invalid Password!';\n          break;\n      }\n\n      return throwError(errorMessage);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}