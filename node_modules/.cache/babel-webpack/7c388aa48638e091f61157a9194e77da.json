{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\nimport * as fromAuthActions from './auth.actions';\nimport { environment } from '../../../environments/environment';\nimport { of } from 'rxjs';\nimport { User } from '../user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../auth.service\";\n\nconst handleAuth = (email, userId, token, expiresIn) => {\n  const expirationDate = new Date(new Date().getTime() + expiresIn * 1000); //salvo i dati in local storage\n\n  const user = new User(email, userId, token, expirationDate);\n  localStorage.setItem('userData', JSON.stringify(user));\n  return new fromAuthActions.AuthSuccess({\n    email: email,\n    userId: userId,\n    token: token,\n    expirationDate: expirationDate,\n    redirect: true\n  });\n};\n\nconst handleError = errorRes => {\n  // error handling code\n  let errorMessage = 'An unknown error occurred!';\n\n  if (!errorRes.error || !errorRes.error.error) {\n    return of(new fromAuthActions.AuthFail(errorMessage));\n  } //se non ha una chiave di errore\n\n\n  switch (errorRes.error.error.message) {\n    case 'EMAIL_EXISTS':\n      errorMessage = 'This email already exists!';\n      break;\n\n    case 'EMAIL_NOT_FOUND':\n      errorMessage = 'Email not found!';\n      break;\n\n    case 'INVALID_PASSWORD':\n      errorMessage = 'Invalid Password!';\n      break;\n  }\n\n  return of(new fromAuthActions.AuthFail(errorMessage));\n};\n\nexport class AuthEffects {\n  constructor(actions$, http, router, authService) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.router = router;\n    this.authService = authService;\n    this.authSignUpEff = this.actions$.pipe(ofType(fromAuthActions.SIGNUP_START), switchMap(signupAction => {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + environment.firebaseAPIKey, {\n        email: signupAction.payload.email,\n        password: signupAction.payload.password,\n        returnSecureToken: true\n      }).pipe(tap(resData => {\n        this.authService.autoLogOut(+resData.expiresIn * 1000);\n      }), map(resData => {\n        return handleAuth(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }), catchError(errorRes => {\n        return handleError(errorRes);\n      }));\n    }));\n    this.authLoginEff = this.actions$.pipe(ofType(fromAuthActions.LOGIN_START), switchMap(authData => {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + environment.firebaseAPIKey, {\n        email: authData.payload.email,\n        password: authData.payload.password,\n        returnSecureToken: true\n      }).pipe(tap(resData => {\n        this.authService.autoLogOut(+resData.expiresIn * 1000);\n      }), map(resData => {\n        return handleAuth(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }), catchError(errorRes => {\n        return handleError(errorRes);\n      }));\n    }));\n    this.authRedirectEff = this.actions$.pipe(ofType(fromAuthActions.AUTH_SUCCESS), tap(authSuccessAction => {\n      if (authSuccessAction.payload.redirect) {\n        this.router.navigate(['/']);\n      }\n    }));\n    this.authAutoLoginEff = this.actions$.pipe(ofType(fromAuthActions.AUTO_LOGIN), map(() => {\n      //se utente memorizzato in local storage\n      const userData = JSON.parse(localStorage.getItem('userData')); //riconverto in oggetto js\n\n      if (!userData) {\n        return {\n          type: 'DUMMY'\n        };\n      }\n\n      const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n      if (loadedUser.token) {\n        const expDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.authService.autoLogOut(expDuration);\n        return new fromAuthActions.AuthSuccess({\n          email: loadedUser.email,\n          userId: loadedUser.id,\n          token: loadedUser.token,\n          expirationDate: new Date(userData._tokenExpirationDate),\n          redirect: false\n        }); // this.autoLogOut(expDuration);\n      }\n\n      return {\n        type: 'DUMMY'\n      };\n    }));\n    this.authLogoutEff = this.actions$.pipe(ofType(fromAuthActions.LOGOUT), tap(() => {\n      this.authService.clearLogoutTimer();\n      localStorage.removeItem('userData');\n      this.router.navigate(['/auth']);\n    }));\n  }\n\n}\n\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AuthService));\n};\n\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});\n\n__decorate([Effect()], AuthEffects.prototype, \"authSignUpEff\", void 0);\n\n__decorate([Effect()], AuthEffects.prototype, \"authLoginEff\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n}) //non produrrà nessun effetto\n], AuthEffects.prototype, \"authRedirectEff\", void 0);\n\n__decorate([Effect()], AuthEffects.prototype, \"authAutoLoginEff\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n}) //non produrrà nessun effetto\n], AuthEffects.prototype, \"authLogoutEff\", void 0);","map":null,"metadata":{},"sourceType":"module"}