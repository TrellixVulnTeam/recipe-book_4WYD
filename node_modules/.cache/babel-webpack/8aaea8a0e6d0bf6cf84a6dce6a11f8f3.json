{"ast":null,"code":"import { map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../recipes/recipe.service\";\nimport * as i3 from \"../auth/auth.service\";\nexport let DataStorageService = /*#__PURE__*/(() => {\n  class DataStorageService {\n    constructor(http, recipeService, authService) {\n      this.http = http;\n      this.recipeService = recipeService;\n      this.authService = authService;\n    } //metodo per salvare i dati\n\n\n    storeRecipes() {\n      const recipes = this.recipeService.getRecipes(); //put come post ma sovrascrive tutto\n\n      this.http.put('https://first-app-b8863-default-rtdb.firebaseio.com/recipes.json', recipes).subscribe(response => {\n        console.log(response);\n      });\n    }\n\n    fetchRecipes() {\n      return this.http.get('https://first-app-b8863-default-rtdb.firebaseio.com/recipes.json' // {\n      //   params: new HttpParams().set('auth', user.token),\n      // } //come concatenare \"http..\" + user.token\n      ).pipe(map(recipes => {\n        //map operatore rxjs\n        return recipes.map(recipe => {\n          //map metodo array js\n          return Object.assign(Object.assign({}, recipe), {\n            ingredients: recipe.ingredients ? recipe.ingredients : []\n          });\n        });\n      }), tap(recipes => {\n        //tap per eseguire del codice \"sul posto\" senza alterare i dati\n        this.recipeService.setRecipes(recipes);\n      }));\n    }\n\n  }\n\n  DataStorageService.ɵfac = function DataStorageService_Factory(t) {\n    return new (t || DataStorageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.RecipeService), i0.ɵɵinject(i3.AuthService));\n  };\n\n  DataStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataStorageService,\n    factory: DataStorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataStorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}