{"ast":null,"code":"import { Ingredient } from '../../shared/ingredient.model';\nimport * as slActions from './shopping-list.actions'; //initial state della proprietà ingredients\n\nconst initialState = {\n  ingredients: [new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10)],\n  editedIngredient: null,\n  editedIngredientIndex: -1\n};\nexport function slReducer(state = initialState, action) {\n  switch (action.type) {\n    case slActions.ADD_INGREDIENT:\n      //nomi actions in maiuscolo\n      return Object.assign(Object.assign({}, state), {\n        ingredients: [...state.ingredients, action.payload]\n      });\n\n    case slActions.ADD_INGREDIENTS:\n      return Object.assign(Object.assign({}, state), {\n        ingredients: [...state.ingredients, ...action.payload]\n      });\n    //spread operator perchè sennò crea un nested array\n\n    case slActions.UPDATE_INGREDIENT:\n      const ingredient = state.ingredients[state.editedIngredientIndex];\n      const updatedIngr = Object.assign(Object.assign({}, ingredient), action.payload);\n      const updatedIngrs = [...state.ingredients];\n      updatedIngrs[state.editedIngredientIndex] = updatedIngr;\n      return Object.assign(Object.assign({}, state), {\n        ingredients: updatedIngrs,\n        editedIngredientIndex: -1,\n        editedIngredient: null\n      });\n\n    case slActions.DELETE_INGREDIENT:\n      return Object.assign(Object.assign({}, state), {\n        ingredients: state.ingredients.filter((ig, igIndex) => {\n          return igIndex !== state.editedIngredientIndex;\n        }),\n        editedIngredientIndex: -1,\n        editedIngredient: null\n      });\n\n    case slActions.START_EDIT:\n      return Object.assign(Object.assign({}, state), {\n        editedIngredientIndex: action.payload\n      });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}